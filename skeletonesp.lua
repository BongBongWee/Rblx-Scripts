local P,G,S,D=game:GetService("Players"),game:GetService("RunService"),game:GetService("LogService"),Drawing;local L,C,E,R,A=P.LocalPlayer,workspace.CurrentCamera,{},nil,nil;local B={{"Head","UpperTorso"},{"UpperTorso","LowerTorso"},{"UpperTorso","LeftUpperArm"},{"LeftUpperArm","LeftLowerArm"},{"LeftLowerArm","LeftHand"},{"UpperTorso","RightUpperArm"},{"RightUpperArm","RightLowerArm"},{"RightLowerArm","RightHand"},{"LowerTorso","LeftUpperLeg"},{"LeftUpperLeg","LeftLowerLeg"},{"LeftLowerLeg","LeftFoot"},{"LowerTorso","RightUpperLeg"},{"RightUpperLeg","RightLowerLeg"},{"RightLowerLeg","RightFoot"}};local function H()local l=D.new("Line")l.Thickness=2;l.Transparency=1;return l end;local function M(p)local t={}for _,c in pairs(B)do local l=H()table.insert(t,{line=l,partA=c[1],partB=c[2]})end;return t end;local function N(e)for _,v in pairs(e)do v.line:Remove()end end;R=G.RenderStepped:Connect(function()for p,e in pairs(E)do local h=p.Character and p.Character:FindFirstChildOfClass("Humanoid")if p.Character and h and h.Health>0 and p.Team~=L.Team then local k=p.TeamColor.Color for _,b in pairs(e)do local a,bp=p.Character:FindFirstChild(b.partA),p.Character:FindFirstChild(b.partB)if a and bp then local ap,ao=C:WorldToViewportPoint(a.Position)local bp,bo=C:WorldToViewportPoint(bp.Position)if ao and bo then b.line.Visible=true;b.line.Color=k;b.line.From=Vector2.new(ap.X,ap.Y)b.line.To=Vector2.new(bp.X,bp.Y)else b.line.Visible=false end else b.line.Visible=false end end else for _,b in pairs(e)do b.line.Visible=false end end end end);local function O(p)local function u(c)if not E[p]then E[p]=M(p)end end;p.CharacterAdded:Connect(u)if p.Character then u(p.Character)end end;local function Q(p)if E[p]then N(E[p])E[p]=nil end end;A=S.MessageOut:Connect(function(m)if m=="IIAMDISABLEINGSKELETONESP"then if R then R:Disconnect()end;if A then A:Disconnect()end;for _,e in pairs(E)do N(e)end;E={}print("[SkeletonESP] Disabled.")end end);P.PlayerAdded:Connect(O)P.PlayerRemoving:Connect(Q)for _,p in pairs(P:GetPlayers())do if p~=L then O(p)end end
